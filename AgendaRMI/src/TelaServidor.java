
import java.awt.Color;
import java.rmi.Naming;
import java.rmi.RMISecurityManager;
import java.rmi.RemoteException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rafaeuoliveira
 */
public class TelaServidor extends javax.swing.JFrame {

    /**
     * Creates new form TelaServidor
     */
    public TelaServidor() {
        initComponents();
        inicializaTelaDoServidor();
        inicializarComplementares();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lStatus = new javax.swing.JLabel();
        lOk = new javax.swing.JLabel();
        lClientes = new javax.swing.JLabel();
        lOperacoes = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaClientes = new javax.swing.JList();
        botaoKillCliente = new javax.swing.JButton();
        lQtdClientes = new javax.swing.JLabel();
        scrollOperacoes = new javax.swing.JScrollPane();
        textAreaOperacoes = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lStatus.setText("Status do Servidor: ");

        lClientes.setText("Clientes Conectados: ");

        lOperacoes.setText("Log das Operacoes");

        jScrollPane2.setViewportView(listaClientes);

        botaoKillCliente.setText("Kill Cliente");
        botaoKillCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                derrubarClienteConectado(evt);
            }
        });

        scrollOperacoes.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        textAreaOperacoes.setColumns(20);
        textAreaOperacoes.setRows(5);
        scrollOperacoes.setViewportView(textAreaOperacoes);
        textAreaOperacoes.getAccessibleContext().setAccessibleParent(jPanel1);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scrollOperacoes)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(lStatus)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lOk))
                            .add(lOperacoes)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(lClientes)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lQtdClientes)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(botaoKillCliente)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lStatus)
                    .add(lOk))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lClientes)
                    .add(lQtdClientes))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botaoKillCliente)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 26, Short.MAX_VALUE)
                .add(lOperacoes)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollOperacoes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void derrubarClienteConectado(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_derrubarClienteConectado
        String ipText = null;
        try {
            ipText = (String)listaClientes.getSelectedValue();
            agenda.derrubarCliente(ipText);
        } catch (RemoteException ex) {
            System.out.println("Erro ao derrubar máquina "+ipText + ex.getMessage());
        }
    }//GEN-LAST:event_derrubarClienteConectado

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TelaServidor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoKillCliente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lClientes;
    private javax.swing.JLabel lOk;
    private javax.swing.JLabel lOperacoes;
    private javax.swing.JLabel lQtdClientes;
    private javax.swing.JLabel lStatus;
    private javax.swing.JList listaClientes;
    private javax.swing.JScrollPane scrollOperacoes;
    private javax.swing.JTextArea textAreaOperacoes;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel listModel;
    private Agendable agenda;
    String host = null;
    
    private void inicializaTelaDoServidor() {
        try {
            
            System.out.println("iniciando o rmiregistry");
            try {
                //System.setProperty("java.rmi.server.hostname", "192.168.1.101");
                //System.setProperty("java.security.policy", "policy");
                //System.setProperty("java.security.AllPermission", "");
                
		java.rmi.registry.LocateRegistry.createRegistry(1099);
		System.out.println("rmiregistry iniciando com sucesso!");
            } catch (Exception e) {
                    System.out.println("Erro ao iniciar o rmiregistry: ");
                    e.printStackTrace();
            }
            
            //String host = null;
            //while (host == null || host.isEmpty()) {
            String host = JOptionPane.showInputDialog("Qual o nome do HOST e PORTA que o servidor será iniciado?");
            //    if (host == null || host.isEmpty()) {
            //        JOptionPane.showMessageDialog(null, "Deve ser informado um host para estabelecer conexao.");
            //    }
            //}
            //System.setSecurityManager(new RMISecurityManager());
            
            agenda = new AgendaServant(this);
            Naming.rebind(host+"Agendable", agenda);
            
            atualizaStatusServidor(true);
            
            //Registry registry = LocateRegistry.getRegistry("localhost");
            //agenda = (Agendable)registry.lookup("Agendable");
            //192.168.1.101
        } catch (Exception e) {
                System.out.println("Nao consegui ficar disponivel...");
                e.printStackTrace();
                atualizaStatusServidor(false);
        }
    }
    
    private void inicializarComplementares() {
        textAreaOperacoes.setEditable(false);
        listModel = new DefaultListModel();
        listaClientes.setModel(listModel);
    }

    private void atualizaStatusServidor(boolean param) {
        if (param) {
            lOk.setText("Conectado!");
            lOk.setBackground(Color.GREEN);
        } else {
            lOk.setText("Nao Conectado!");
            lOk.setBackground(Color.RED);
        }
    }
    
    public void atualizaQuantidadeClientesConectados(int qtd) {
        lQtdClientes.setText(String.valueOf(qtd));
    }
    
    public void atualizarOperacoesDosClientes(String operacao) {
        textAreaOperacoes.append(operacao + "\n");
        textAreaOperacoes.setCaretPosition(textAreaOperacoes.getDocument().getLength());
    }
    
    public void adicionarClienteConectado(String ip) {
        listModel.addElement(ip);
    }
    
    public void removerClienteConectado(String ip) {
        listModel.removeElement(ip);
    }
}
